#!/usr/bin/env bash

set -euo pipefail

function log() {
    echo "-----> $*"
}

function indent() {
    sed -e 's/^/       /'
}

export BUILD_DIR="$1"
export ENV_DIR="$3"

BUILDPACK_VARIABLES="DISABLE_POETRY_CREATE_RUNTIME_FILE PYTHON_RUNTIME_VERSION"

shopt -s nullglob

for env_file in "$ENV_DIR"/POETRY_* ; do
    export "$(basename "$env_file")=$(cat "$env_file" 2>/dev/null)"
done

for env_file in $BUILDPACK_VARIABLES ; do
    [ -f "$ENV_DIR/$env_file" ] && export "$(basename "$env_file")=$(cat "$ENV_DIR/$env_file" 2>/dev/null)"
done

# Define the subdirectory where pyproject.toml and poetry.lock are located
POETRY_DIR="$BUILD_DIR/backend"

POETRY_VERSION="${POETRY_VERSION:-}"

if [ -z "$POETRY_VERSION" ] ; then
    if [ -f "$POETRY_DIR/poetry.lock" ] ; then
        POETRY_VERSION=$(head --lines=1 "$POETRY_DIR/poetry.lock" | grep --only-matching '[0-9]\+\.[0-9]\+\.[0-9]\+' || true)
    fi
    if [ -n "$POETRY_VERSION" ] ; then
        export POETRY_VERSION
        log "Read Poetry version $POETRY_VERSION from backend/poetry.lock"
    else
        log "No Poetry version specified in POETRY_VERSION config var. Defaulting to latest."
    fi
else
    log "Using Poetry version from POETRY_VERSION config var: $POETRY_VERSION"
fi

log "Generate requirements.txt with Poetry"

log "Install Poetry"
curl -sSL https://install.python-poetry.org | python3 | indent

log "Add Poetry to the PATH"
export PATH="/app/.local/bin:$PATH"

if [ "${POETRY_VERSION:0:3}" = "1.2" ] ; then
    log "Force usage of active Python and disable creation of virtualenvs"
    poetry config virtualenvs.prefer-active-python true | indent
    poetry config virtualenvs.create false | indent
fi

log "Install poetry-plugin-export"
poetry self add 'poetry-plugin-export@*' | indent

if [ "${POETRY_VERSION:0:3}" = "1.8" ] ; then
    poetry config warnings.export false
fi

REQUIREMENTS_FILE="$BUILD_DIR/requirements.txt"

log "Export $REQUIREMENTS_FILE from Poetry"

cd "$POETRY_DIR"

EXPORT_PARAMETERS=(--without-hashes --with-credentials)

if [ "${POETRY_EXPORT_PARAMS:-0}" != "0" ] ; then
    IFS=" " read -r -a EXPORT_PARAMETERS <<< "$POETRY_EXPORT_PARAMS"
    log "Using POETRY_EXPORT_PARAMS to set export params (" "${EXPORT_PARAMETERS[@]}" ") for $REQUIREMENTS_FILE"
fi

if [ "${POETRY_EXPORT_DEV_REQUIREMENTS:-0}" != "0" ] ; then
    log "Enable exporting dev requirements to $REQUIREMENTS_FILE"
    EXPORT_PARAMETERS+=(--dev)
fi

poetry export -f requirements.txt "${EXPORT_PARAMETERS[@]}" -o "$REQUIREMENTS_FILE.orig" | indent
sed -e 's/^-e //' < "$REQUIREMENTS_FILE.orig" > "$REQUIREMENTS_FILE" && rm "$REQUIREMENTS_FILE.orig"

RUNTIME_FILE="$BUILD_DIR/runtime.txt"

log "Export Python version from Poetry to Heroku $RUNTIME_FILE file"

if [ "${DISABLE_POETRY_CREATE_RUNTIME_FILE:-0}" != "0" ] ; then
    log "Skip generation of $RUNTIME_FILE file from poetry.lock"
    exit 0
fi

if [ -f "$RUNTIME_FILE" ] ; then
    log "$RUNTIME_FILE found, delete this file from your repository!" >&2
    exit 1
fi

if [ -z "${PYTHON_RUNTIME_VERSION:-}" ] ; then
    log "Read Python version from backend/poetry.lock"
    PYTHON_RUNTIME_VERSION="$(sed -n -e '/^\[metadata\]/,/^\[/p' poetry.lock | sed -n -e 's/^python-versions[[:space:]]*=[[:space:]]*//p' | tr -d \"'[:space:]'\')"
else
    log "Force Python version to $PYTHON_RUNTIME_VERSION, because PYTHON_RUNTIME_VERSION is set!"
fi

if [[ "$PYTHON_RUNTIME_VERSION" =~ ^(==)?[2-9](\.[0-9]+){2}$ ]] ; then
    PYTHON_RUNTIME_VERSION=${PYTHON_RUNTIME_VERSION#"=="}
    log "Write $PYTHON_RUNTIME_VERSION into $RUNTIME_FILE"
    echo "python-$PYTHON_RUNTIME_VERSION" > "$RUNTIME_FILE"
else
    log "$PYTHON_RUNTIME_VERSION is not valid, please specify an exact Python version (e.g. 3.8.1 or ==3.8.1) in your pyproject.toml (and thus poetry.lock)" >&2
    exit 1
fi